#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'calculadora_types'

module Calculadora
  class Client
    include ::Thrift::Client

    def ping()
      send_ping()
      recv_ping()
    end

    def send_ping()
      send_message('ping', Ping_args)
    end

    def recv_ping()
      result = receive_message(Ping_result)
      return
    end

    def suma(num1, num2)
      send_suma(num1, num2)
      return recv_suma()
    end

    def send_suma(num1, num2)
      send_message('suma', Suma_args, :num1 => num1, :num2 => num2)
    end

    def recv_suma()
      result = receive_message(Suma_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'suma failed: unknown result')
    end

    def resta(num1, num2)
      send_resta(num1, num2)
      return recv_resta()
    end

    def send_resta(num1, num2)
      send_message('resta', Resta_args, :num1 => num1, :num2 => num2)
    end

    def recv_resta()
      result = receive_message(Resta_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'resta failed: unknown result')
    end

    def multiplicacion(num1, num2)
      send_multiplicacion(num1, num2)
      return recv_multiplicacion()
    end

    def send_multiplicacion(num1, num2)
      send_message('multiplicacion', Multiplicacion_args, :num1 => num1, :num2 => num2)
    end

    def recv_multiplicacion()
      result = receive_message(Multiplicacion_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiplicacion failed: unknown result')
    end

    def division(num1, num2)
      send_division(num1, num2)
      return recv_division()
    end

    def send_division(num1, num2)
      send_message('division', Division_args, :num1 => num1, :num2 => num2)
    end

    def recv_division()
      result = receive_message(Division_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'division failed: unknown result')
    end

    def modulo(num1, num2)
      send_modulo(num1, num2)
      return recv_modulo()
    end

    def send_modulo(num1, num2)
      send_message('modulo', Modulo_args, :num1 => num1, :num2 => num2)
    end

    def recv_modulo()
      result = receive_message(Modulo_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'modulo failed: unknown result')
    end

    def sumarVectores(v1, v2)
      send_sumarVectores(v1, v2)
      return recv_sumarVectores()
    end

    def send_sumarVectores(v1, v2)
      send_message('sumarVectores', SumarVectores_args, :v1 => v1, :v2 => v2)
    end

    def recv_sumarVectores()
      result = receive_message(SumarVectores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'sumarVectores failed: unknown result')
    end

    def restarVectores(v1, v2)
      send_restarVectores(v1, v2)
      return recv_restarVectores()
    end

    def send_restarVectores(v1, v2)
      send_message('restarVectores', RestarVectores_args, :v1 => v1, :v2 => v2)
    end

    def recv_restarVectores()
      result = receive_message(RestarVectores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'restarVectores failed: unknown result')
    end

    def multiplicarVectores(v1, v2)
      send_multiplicarVectores(v1, v2)
      return recv_multiplicarVectores()
    end

    def send_multiplicarVectores(v1, v2)
      send_message('multiplicarVectores', MultiplicarVectores_args, :v1 => v1, :v2 => v2)
    end

    def recv_multiplicarVectores()
      result = receive_message(MultiplicarVectores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'multiplicarVectores failed: unknown result')
    end

    def dividirVectores(v1, v2)
      send_dividirVectores(v1, v2)
      return recv_dividirVectores()
    end

    def send_dividirVectores(v1, v2)
      send_message('dividirVectores', DividirVectores_args, :v1 => v1, :v2 => v2)
    end

    def recv_dividirVectores()
      result = receive_message(DividirVectores_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'dividirVectores failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_ping(seqid, iprot, oprot)
      args = read_args(iprot, Ping_args)
      result = Ping_result.new()
      @handler.ping()
      write_result(result, oprot, 'ping', seqid)
    end

    def process_suma(seqid, iprot, oprot)
      args = read_args(iprot, Suma_args)
      result = Suma_result.new()
      result.success = @handler.suma(args.num1, args.num2)
      write_result(result, oprot, 'suma', seqid)
    end

    def process_resta(seqid, iprot, oprot)
      args = read_args(iprot, Resta_args)
      result = Resta_result.new()
      result.success = @handler.resta(args.num1, args.num2)
      write_result(result, oprot, 'resta', seqid)
    end

    def process_multiplicacion(seqid, iprot, oprot)
      args = read_args(iprot, Multiplicacion_args)
      result = Multiplicacion_result.new()
      result.success = @handler.multiplicacion(args.num1, args.num2)
      write_result(result, oprot, 'multiplicacion', seqid)
    end

    def process_division(seqid, iprot, oprot)
      args = read_args(iprot, Division_args)
      result = Division_result.new()
      result.success = @handler.division(args.num1, args.num2)
      write_result(result, oprot, 'division', seqid)
    end

    def process_modulo(seqid, iprot, oprot)
      args = read_args(iprot, Modulo_args)
      result = Modulo_result.new()
      result.success = @handler.modulo(args.num1, args.num2)
      write_result(result, oprot, 'modulo', seqid)
    end

    def process_sumarVectores(seqid, iprot, oprot)
      args = read_args(iprot, SumarVectores_args)
      result = SumarVectores_result.new()
      result.success = @handler.sumarVectores(args.v1, args.v2)
      write_result(result, oprot, 'sumarVectores', seqid)
    end

    def process_restarVectores(seqid, iprot, oprot)
      args = read_args(iprot, RestarVectores_args)
      result = RestarVectores_result.new()
      result.success = @handler.restarVectores(args.v1, args.v2)
      write_result(result, oprot, 'restarVectores', seqid)
    end

    def process_multiplicarVectores(seqid, iprot, oprot)
      args = read_args(iprot, MultiplicarVectores_args)
      result = MultiplicarVectores_result.new()
      result.success = @handler.multiplicarVectores(args.v1, args.v2)
      write_result(result, oprot, 'multiplicarVectores', seqid)
    end

    def process_dividirVectores(seqid, iprot, oprot)
      args = read_args(iprot, DividirVectores_args)
      result = DividirVectores_result.new()
      result.success = @handler.dividirVectores(args.v1, args.v2)
      write_result(result, oprot, 'dividirVectores', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Ping_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Ping_result
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Suma_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Resta_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplicacion_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiplicacion_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Division_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Modulo_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    NUM1 = 1
    NUM2 = 2

    FIELDS = {
      NUM1 => {:type => ::Thrift::Types::I32, :name => 'num1'},
      NUM2 => {:type => ::Thrift::Types::I32, :name => 'num2'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Modulo_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SumarVectores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::LIST, :name => 'v1', :element => {:type => ::Thrift::Types::DOUBLE}},
      V2 => {:type => ::Thrift::Types::LIST, :name => 'v2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class SumarVectores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RestarVectores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::LIST, :name => 'v1', :element => {:type => ::Thrift::Types::DOUBLE}},
      V2 => {:type => ::Thrift::Types::LIST, :name => 'v2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class RestarVectores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MultiplicarVectores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::LIST, :name => 'v1', :element => {:type => ::Thrift::Types::DOUBLE}},
      V2 => {:type => ::Thrift::Types::LIST, :name => 'v2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class MultiplicarVectores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DividirVectores_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    V1 = 1
    V2 = 2

    FIELDS = {
      V1 => {:type => ::Thrift::Types::LIST, :name => 'v1', :element => {:type => ::Thrift::Types::DOUBLE}},
      V2 => {:type => ::Thrift::Types::LIST, :name => 'v2', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class DividirVectores_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

